from collections import Counter


def or_merge(l1, l2):
    return tuple(l1[i] or l2[i] for i in range(3))


n_rows, n_cols = map(int, input().split())
down, left, up, right = [input() for _ in range(4)]

white = (1, 1, 1)
masks = {(0, 0, 1),
         (0, 1, 0),
         (0, 1, 1),
         (1, 0, 0),
         (1, 0, 1),
         (1, 1, 0),
         (1, 1, 1)}

letter_to_list = {"R": (1, 0, 0), "G": (0, 1, 0), "B": (0, 0, 1)}

col_counter = Counter(or_merge(letter_to_list[up[col]], letter_to_list[down[col]]) for col in range(n_cols))

result = 0

for row in range(n_rows):
    min_target = tuple(white[i] - (letter_to_list[right[row]][i] or letter_to_list[left[row]][i]) for i in range(3))
    targets = {or_merge(min_target, mask) for mask in masks}
    result += sum(col_counter[target] for target in targets)

print(result)
